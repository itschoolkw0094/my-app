// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?  @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String
  accounts        Account[]
  authed_comments Comment[] @relation("authed_comments")
  rateed_comments RateForComment[]    @relation("rated_by")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model News {
  id          String    @id @default(cuid())
  image       String?
  date        DateTime?
  title       String?
  content     String?   @db.Text
  article_url String?
  comments    Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  authorId  String
  author    User      @relation("authed_comments", fields: [authorId], references: [id])
  authorName String?
  newsId    String
  atNews    News      @relation(fields: [newsId], references: [id])
  date      DateTime?
  title     String?
  content   String?   @db.Text
  type      Boolean   @default(false)
  goodCount Int       @default(0)
  badCount  Int       @default(0)
  rate      RateForComment[]
}

model RateForComment {
  id        Int       @id @default(autoincrement())
  userId    String
  byUser    User      @relation("rated_by", fields: [userId], references: [id])
  commentId String
  atComment Comment   @relation(fields: [commentId], references: [id])
  type      Boolean
  date      DateTime?

  @@unique([userId, commentId])
}

